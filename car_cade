## Arduino Programming 
// Defining motor control pins with real-world names

// Front Left Wheel (FLW)
const int FLW_Speed = 5;     
const int FLW_Forward = 6;   
const int FLW_Backward = 7;   

// Front Right Wheel (FRW)
const int FRW_Speed = 10;    
const int FRW_Forward = 8; 
const int FRW_Backward = 9;   

// Back Left Wheel (BLW)
const int BLW_Speed = 3;     
const int BLW_Forward = 2;   
const int BLW_Backward = 4;  

// Back Right Wheel (BRW)
const int BRW_Speed = 11;    
const int BRW_Forward = 12; 
const int BRW_Backward = 13; 

void setup() {
    // Front Left Wheel Setup
    pinMode(FLW_Speed, OUTPUT);
    pinMode(FLW_Forward, OUTPUT);
    pinMode(FLW_Backward, OUTPUT);

    // Front Right Wheel Setup
    pinMode(FRW_Speed, OUTPUT);
    pinMode(FRW_Forward, OUTPUT);
    pinMode(FRW_Backward, OUTPUT);

    // Back Left Wheel Setup
    pinMode(BLW_Speed, OUTPUT);
    pinMode(BLW_Forward, OUTPUT);
    pinMode(BLW_Backward, OUTPUT);

    // Back Right Wheel Setup
    pinMode(BRW_Speed, OUTPUT);
    pinMode(BRW_Forward, OUTPUT);
    pinMode(BRW_Backward, OUTPUT);
}

// Function to move the car forward
void moveForward() {
    digitalWrite(FLW_Forward, HIGH);
    digitalWrite(FLW_Backward, LOW);
    analogWrite(FLW_Speed, 255); 

    digitalWrite(FRW_Forward, HIGH);
    digitalWrite(FRW_Backward, LOW);
    analogWrite(FRW_Speed, 255); 

    digitalWrite(BLW_Forward, HIGH);
    digitalWrite(BLW_Backward, LOW);
    analogWrite(BLW_Speed, 255); 

    digitalWrite(BRW_Forward, HIGH);
    digitalWrite(BRW_Backward, LOW);
    analogWrite(BRW_Speed, 255);
}

// Function to move the car backward
void moveBackward() {
    digitalWrite(FLW_Forward, LOW);
    digitalWrite(FLW_Backward, HIGH);
    analogWrite(FLW_Speed, 255); 

    digitalWrite(FRW_Forward, LOW);
    digitalWrite(FRW_Backward, HIGH);
    analogWrite(FRW_Speed, 255); 

    digitalWrite(BLW_Forward, LOW);
    digitalWrite(BLW_Backward, HIGH);
    analogWrite(BLW_Speed, 255); 

    digitalWrite(BRW_Forward, LOW);
    digitalWrite(BRW_Backward, HIGH);
    analogWrite(BRW_Speed, 255); 
}

// Function to turn the car left
void turnLeft() {
    digitalWrite(FLW_Forward, LOW);
    digitalWrite(FLW_Backward, HIGH);
    analogWrite(FLW_Speed, 255);

    digitalWrite(FRW_Forward, HIGH);
    digitalWrite(FRW_Backward, LOW);
    analogWrite(FRW_Speed, 255); 

    digitalWrite(BLW_Forward, LOW);
    digitalWrite(BLW_Backward, HIGH);
    analogWrite(BLW_Speed, 255); 

    digitalWrite(BRW_Forward, HIGH);
    digitalWrite(BRW_Backward, LOW);
    analogWrite(BRW_Speed, 255);
}

// Function to turn the car right
void turnRight() {
    digitalWrite(FLW_Forward, HIGH);
    digitalWrite(FLW_Backward, LOW);
    analogWrite(FLW_Speed, 255); 

    digitalWrite(FRW_Forward, LOW);
    digitalWrite(FRW_Backward, HIGH);
    analogWrite(FRW_Speed, 255); 

    digitalWrite(BLW_Forward, HIGH);
    digitalWrite(BLW_Backward, LOW);
    analogWrite(BLW_Speed, 255); 

    digitalWrite(BRW_Forward, LOW);
    digitalWrite(BRW_Backward, HIGH);
    analogWrite(BRW_Speed, 255); 
}

void loop() {
    moveForward(); 
    delay(1000);   

    turnLeft();    
    delay(1000); 

    moveBackward();
    delay(1000);    

    turnRight();  
    delay(1000);   
}











## C++ Code to capture Images 
	#include <opencv2/opencv.hpp> 
	#include <raspicam_cv.h> 
	#include <iostream> 
	#include <chrono> 
	
	using namespace std; 
	using namespace cv; 
	using namespace raspicam; 
	
	Mat frame; 
	
	// Function to set up the camera
	void Setup(int argc, char** argv, RaspiCam_Cv &Camera) 
	{ 
	    Camera.set(CAP_PROP_FRAME_WIDTH, 400); // Set width
	    Camera.set(CAP_PROP_FRAME_HEIGHT, 240); // Set height
	    Camera.set(CAP_PROP_BRIGHTNESS, 50); // Set brightness
	    Camera.set(CAP_PROP_CONTRAST, 50); // Set contrast
	    Camera.set(CAP_PROP_SATURATION, 50); // Set saturation
	    Camera.set(CAP_PROP_GAIN, 50); // Set gain
	    Camera.set(CAP_PROP_FPS, 100); // Set frames per second
	} 
	
	int main(int argc, char** argv) 
	{ 
	    RaspiCam_Cv Camera; 
	    Setup(argc, argv, Camera); 
	
	    cout << "Connecting to camera..." << endl; 
	    if (!Camera.open()) 
	    { 
	        cout << "Failed to connect to the camera." << endl; 
	        return -1; 
	    } 
	    cout << "Camera connected successfully!" << endl; 
	
	    // Loop to capture and display frames
	    while (true) 
	    { 
	        auto start = chrono::system_clock::now(); 
	
	        Camera.grab(); // Capture frame
	        Camera.retrieve(frame); // Retrieve captured frame
	
	        auto end = chrono::system_clock::now(); 
	        chrono::duration<double> elapsed_seconds = end - start; 
	        float t = elapsed_seconds.count(); 
	        int FPS = 1 / t; 
	        cout << "FPS = " << FPS << endl; 
	
	        imshow("Original", frame); // Show frame
	        if (waitKey(1) == 27) { // Press 'Esc' to exit
	            break;
	        }
	    } 
	
	    Camera.release(); // Release the camera
	    return 0; 
	}










// Obstacle Detection & Avoidance using Ultrasonic Sensor

#define TRIG_PIN 3  // Ultrasonic Sensor TRIG pin
#define ECHO_PIN 4  // Ultrasonic Sensor ECHO pin
#define MOTOR_LEFT_FORWARD 6
#define MOTOR_LEFT_BACKWARD 7
#define MOTOR_RIGHT_FORWARD 8
#define MOTOR_RIGHT_BACKWARD 9
#define SAFE_DISTANCE 200 // Distance threshold in cm

void setup() {
    pinMode(TRIG_PIN, OUTPUT);
    pinMode(ECHO_PIN, INPUT);
    pinMode(MOTOR_LEFT_FORWARD, OUTPUT);
    pinMode(MOTOR_LEFT_BACKWARD, OUTPUT);
    pinMode(MOTOR_RIGHT_FORWARD, OUTPUT);
    pinMode(MOTOR_RIGHT_BACKWARD, OUTPUT);
    Serial.begin(9600);
}

long getDistance() {
    digitalWrite(TRIG_PIN, LOW);
    delayMicroseconds(2);
    digitalWrite(TRIG_PIN, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIG_PIN, LOW);
    long duration = pulseIn(ECHO_PIN, HIGH);
    return duration * 0.034 / 2; // Convert to cm
}

void moveForward() {
    digitalWrite(MOTOR_LEFT_FORWARD, HIGH);
    digitalWrite(MOTOR_LEFT_BACKWARD, LOW);
    digitalWrite(MOTOR_RIGHT_FORWARD, HIGH);
    digitalWrite(MOTOR_RIGHT_BACKWARD, LOW);
}

void stopMotors() {
    digitalWrite(MOTOR_LEFT_FORWARD, LOW);
    digitalWrite(MOTOR_LEFT_BACKWARD, LOW);
    digitalWrite(MOTOR_RIGHT_FORWARD, LOW);
    digitalWrite(MOTOR_RIGHT_BACKWARD, LOW);
}

void turnLeft() {
    digitalWrite(MOTOR_LEFT_FORWARD, LOW);
    digitalWrite(MOTOR_LEFT_BACKWARD, HIGH);
    digitalWrite(MOTOR_RIGHT_FORWARD, HIGH);
    digitalWrite(MOTOR_RIGHT_BACKWARD, LOW);
    delay(500);
    stopMotors();
}

void turnRight() {
    digitalWrite(MOTOR_LEFT_FORWARD, HIGH);
    digitalWrite(MOTOR_LEFT_BACKWARD, LOW);
    digitalWrite(MOTOR_RIGHT_FORWARD, LOW);
    digitalWrite(MOTOR_RIGHT_BACKWARD, HIGH);
    delay(500);
    stopMotors();
}

void loop() {
    long distance = getDistance();
    Serial.print("Distance: ");
    Serial.println(distance);
    
    if (distance < SAFE_DISTANCE) {
        stopMotors();
        delay(500);
        turnLeft(); // Turn left if an obstacle is detected
    } else {
        moveForward();
    }
    delay(100);
}








##Traffic Sign Detection using Python

import cv2
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model

# Load pre-trained traffic sign recognition model
model = load_model('traffic_sign_model.h5')

# Load class labels
classes = {0: 'Speed Limit 20', 1: 'Speed Limit 50', 2: 'Stop', 3: 'Yield', 4: 'No Entry'}

# Initialize camera
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        break
    
    # Preprocess image
    img = cv2.resize(frame, (32, 32))
    img = np.expand_dims(img, axis=0) / 255.0  # Normalize
    
    # Predict traffic sign
    prediction = model.predict(img)
    class_id = np.argmax(prediction)
    label = classes[class_id]
    
    # Display result
    cv2.putText(frame, label, (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    cv2.imshow('Traffic Sign Detection', frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()








##V2V communicatin code

import paho.mqtt.client as mqtt
import json
import time

# MQTT Broker (can be a local Raspberry Pi or cloud service like HiveMQ)
BROKER = "broker.hivemq.com"
PORT = 1883
TOPIC_SEND = "self_driving_car/v2v"
TOPIC_RECEIVE = "self_driving_car/v2v"

# Car Information (Simulated Data)
car_id = "Car_1"
speed = 40  # km/h
position = {"latitude": 12.9716, "longitude": 77.5946}  # Example coordinates
obstacle_detected = False

# Callback function when a message is received
def on_message(client, userdata, message):
    received_data = json.loads(message.payload.decode())
    print(f"ðŸš— Data Received from {received_data['car_id']}: Speed {received_data['speed']} km/h, Position {received_data['position']}, Obstacle: {received_data['obstacle']}")

# Connect to MQTT broker
client = mqtt.Client()
client.on_message = on_message
client.connect(BROKER, PORT)

client.subscribe(TOPIC_RECEIVE)
client.loop_start()

while True:
    # Simulate sending car data every 2 seconds
    data = {
        "car_id": car_id,
        "speed": speed,
        "position": position,
        "obstacle": obstacle_detected
    }
    
    client.publish(TOPIC_SEND, json.dumps(data))
    print(f"ðŸ“¡ Data Sent: {data}")
    
    time.sleep(2)  # Send data every 2 seconds

client.loop_stop()
client.disconnect()







##PATH PLANING 

import heapq

# Define the grid map (0 = Free Path, 1 = Obstacle)
grid = [
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
    [0, 1, 1, 1, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 1, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
    [0, 1, 0, 1, 0, 1, 1, 1, 1, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
    [0, 1, 1, 1, 1, 1, 1, 0, 1, 0],
    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
]

# Define start and goal positions
start = (0, 0)  # Starting position (row, col)
goal = (7, 9)   # Destination position (row, col)

# Movement directions (up, down, left, right, diagonals)
directions = [(0, 1), (1, 0), (0, -1), (-1, 0), (1, 1), (-1, -1), (1, -1), (-1, 1)]

# A* Algorithm for Path Planning
def astar(grid, start, goal):
    rows, cols = len(grid), len(grid[0])
    open_list = []
    heapq.heappush(open_list, (0, start))  # Priority queue
    came_from = {}  # Store path
    g_score = {start: 0}  # Cost from start
    f_score = {start: heuristic(start, goal)}  # Estimated cost to goal

    while open_list:
        _, current = heapq.heappop(open_list)

        if current == goal:
            return reconstruct_path(came_from, current)

        for dx, dy in directions:
            neighbor = (current[0] + dx, current[1] + dy)

            if 0 <= neighbor[0] < rows and 0 <= neighbor[1] < cols and grid[neighbor[0]][neighbor[1]] == 0:
                tentative_g_score = g_score[current] + 1

                if neighbor not in g_score or tentative_g_score < g_score[neighbor]:
                    came_from[neighbor] = current
                    g_score[neighbor] = tentative_g_score
                    f_score[neighbor] = tentative_g_score + heuristic(neighbor, goal)
                    heapq.heappush(open_list, (f_score[neighbor], neighbor))

    return None  # No path found

# Heuristic Function (Manhattan Distance)
def heuristic(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

# Reconstruct Path
def reconstruct_path(came_from, current):
    path = [current]
    while current in came_from:
        current = came_from[current]
        path.append(current)
    return path[::-1]

# Find the best path
path = astar(grid, start, goal)

# Display the grid with the path
if path:
    for r, c in path:
        grid[r][c] = 2  # Mark the path with '2'
    
    for row in grid:
        print(" ".join(str(cell) for cell in row))
else:
    print("ðŸš¨ No path found!")








## Final Code (Lane End detection & U-Turn Implementation) 
	#include <opencv2/opencv.hpp>
	#include <raspicam_cv.h>
	#include <iostream>
	#include <chrono>
	#include <ctime>
	
	using namespace std;
	using namespace cv;
	using namespace raspicam;
	
	Mat frame, Matrix, framePers, frameGray, frameThresh, frameEdge, frameFinal, frameFinalDuplicate;
	Mat ROILane;
	int LeftLanePos, RightLanePos, frameCenter, laneCenter, Result;
	
	RaspiCam_Cv Camera;
	
	stringstream ss;
	
	
	vector<int> histrogramLane;
	
	Point2f Source[] = {Point2f(40,145),Point2f(360,145),Point2f(10,195), Point2f(390,195)};
	Point2f Destination[] = {Point2f(100,0),Point2f(280,0),Point2f(100,240), Point2f(280,240)};
	
	
	 void Setup ( int argc,char **argv, RaspiCam_Cv &Camera )
	  {
	    Camera.set ( CAP_PROP_FRAME_WIDTH,  ( "-w",argc,argv,400 ) );
	    Camera.set ( CAP_PROP_FRAME_HEIGHT,  ( "-h",argc,argv,240 ) );
	    Camera.set ( CAP_PROP_BRIGHTNESS, ( "-br",argc,argv,50 ) );
	    Camera.set ( CAP_PROP_CONTRAST ,( "-co",argc,argv,50 ) );
	    Camera.set ( CAP_PROP_SATURATION,  ( "-sa",argc,argv,50 ) );
	    Camera.set ( CAP_PROP_GAIN,  ( "-g",argc,argv ,50 ) );
	    Camera.set ( CAP_PROP_FPS,  ( "-fps",argc,argv,100));
	
	}
	
	void Capture()
	{
		Camera.grab();
	    Camera.retrieve( frame);
	    cvtColor(frame, frame, COLOR_BGR2RGB);
	}
	
	void Perspective()
	{
		line(frame,Source[0], Source[1], Scalar(0,0,255), 2);
		line(frame,Source[1], Source[3], Scalar(0,0,255), 2);
		line(frame,Source[3], Source[2], Scalar(0,0,255), 2);
		line(frame,Source[2], Source[0], Scalar(0,0,255), 2);
		
		
		Matrix = getPerspectiveTransform(Source, Destination);
		warpPerspective(frame, framePers, Matrix, Size(400,240));
	}
	
	void Threshold()
	{
		cvtColor(framePers, frameGray, COLOR_RGB2GRAY);
		inRange(frameGray, 200, 255, frameThresh);
		Canny(frameGray,frameEdge, 900, 900, 3, false);
		add(frameThresh, frameEdge, frameFinal);
		cvtColor(frameFinal, frameFinal, COLOR_GRAY2RGB);
		cvtColor(frameFinal, frameFinalDuplicate, COLOR_RGB2BGR);   //used in histrogram function only
		
	}
	
	void Histrogram()
	{
	    histrogramLane.resize(400);
	    histrogramLane.clear();
	    
	    for(int i=0; i<400; i++)       //frame.size().width = 400
	    {
		ROILane = frameFinalDuplicate(Rect(i,140,1,100));
		divide(255, ROILane, ROILane);
		histrogramLane.push_back((int)(sum(ROILane)[0])); 
	    }
	}
	
	void LaneFinder()
	{
	    vector<int>:: iterator LeftPtr;
	    LeftPtr = max_element(histrogramLane.begin(), histrogramLane.begin() + 150);
	    LeftLanePos = distance(histrogramLane.begin(), LeftPtr); 
	    
	    vector<int>:: iterator RightPtr;
	    RightPtr = max_element(histrogramLane.begin() +250, histrogramLane.end());
	    RightLanePos = distance(histrogramLane.begin(), RightPtr);
	    
	    line(frameFinal, Point2f(LeftLanePos, 0), Point2f(LeftLanePos, 240), Scalar(0, 255,0), 2);
	    line(frameFinal, Point2f(RightLanePos, 0), Point2f(RightLanePos, 240), Scalar(0,255,0), 2); 
	}
	
	void LaneCenter()
	{
	    laneCenter = (RightLanePos-LeftLanePos)/2 +LeftLanePos;
	    frameCenter = 188;
	    
	    line(frameFinal, Point2f(laneCenter,0), Point2f(laneCenter,240), Scalar(0,255,0), 3);
	    line(frameFinal, Point2f(frameCenter,0), Point2f(frameCenter,240), Scalar(255,0,0), 3);
	
	    Result = laneCenter-frameCenter;
	}
	
	
	int main(int argc,char **argv)
	{
		
		Setup(argc, argv, Camera);
		cout<<"Connecting to camera"<<endl;
		if (!Camera.open())
		{
			
		cout<<"Failed to Connect"<<endl;
	     }
	     
	     cout<<"Camera Id = "<<Camera.getId()<<endl;
	     
	     
	     
	    
	    while(1)
	    {
		auto start = std::chrono::system_clock::now();
	
	    Capture();
	    Perspective();
	    Threshold();
	    Histrogram();
	    LaneFinder();
	    LaneCenter();
	    
	    ss.str(" ");
	    ss.clear();
	    ss<<"Result = "<<Result;
	    putText(frame, ss.str(), Point2f(1,50), 0,1, Scalar(0,0,255), 2);
	    
	    
	    namedWindow("orignal", WINDOW_KEEPRATIO);
	    moveWindow("orignal", 0, 100);
	    resizeWindow("orignal", 640, 480);
	    imshow("orignal", frame);
	    
	    namedWindow("Perspective", WINDOW_KEEPRATIO);
	    moveWindow("Perspective", 640, 100);
	    resizeWindow("Perspective", 640, 480);
	    imshow("Perspective", framePers);
	    
	    namedWindow("Final", WINDOW_KEEPRATIO);
	    moveWindow("Final", 1280, 100);
	    resizeWindow("Final", 640, 480);
	    imshow("Final", frameFinal);
	    
	    
	    waitKey(1);
	    auto end = std::chrono::system_clock::now();
	    std::chrono::duration<double> elapsed_seconds = end-start;
	    
	    float t = elapsed_seconds.count();
	    int FPS = 1/t;
	    cout<<"FPS = "<<FPS<<endl;
	    
	    }
	
	    
	    return 0;
	     
	}
